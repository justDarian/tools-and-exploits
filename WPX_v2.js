/*
-------------------------------------------------------------------------------
-----------------------------WPX----Version: 1.5.1-----------------------------
-------------------------------------------------------------------------------
    Description:
    - Utility tool to make modding sites that use webpack easier than ever.

    Example usage : 
    let instance = new wpx();
    instance.getModule('someModule');

------------------------------------------------------------------------------- 
------------------------------------------------------------------------------- 
------------------------------------------------------------------------------- 
*/


function wpx(config) {
    // default webpack finder
    if (typeof config?.webpack === "undefined") {
        this.webpack = window[Object.keys(window).find((propertyName) =>
            propertyName.includes("webpack")
        )];
    } else {
        this.webpack = config.webpack;
    }

    this.webpack = self[Object.keys(self).find(key => key.includes("webpack"))];
    this.require = null;

    try {
        // Attempt to use the regular webpack push/pop mechanism
        this.require = this.webpack.push([[""], { [""]: (e, t, i) => e.exports = i }, [[""]]]);
        this.webpack.pop()
    } catch (e) {
        try {
            // Attempt to use Symbol() for webpack push/pop mechanism
            this.webpack.push([[Symbol()], {}, (req) => {
                this.require = req;
            }])
            this.webpack.pop()
        } catch (e) {
            // If both methods fail, generate a random Symbol and use it
            let MID = Math.floor(Math.random()*100000+1);
            this.require = this.webpack.push([[], {
                [MID] : (_,e,t) => {
                    e.exports=t
                }
            }, [[MID]]]).exports
            this.webpack.pop()
        }
    }

    // Ensure the cache is fixed if not available
    if (!this.require?.c) {
        wpx.prototype.fixCache(this.require);
    }
}

// modules and cache for easy use
wpx.prototype = Object.create({   
    get modules() {
        return this.require.m;
    },

    get cache() {
        return this.require.c;
    },
});

// Method to fix the cache by intercepting require calls
wpx.prototype.fixCache = function (require) {
    try {
        const sym = Symbol();

        // Define a getter on Object.prototype to intercept require calls
        Object.defineProperty(Object.prototype, sym, {
            get() {
                require.c = this
                return {
                    exports: {}
                };
            },
            set() {},
            configurable: true,
        });

        // Trigger a require call to extract the cache
        require(sym);
        delete Object.prototype[sym];
    } catch (e) {}
}

// Method to get modules based on a filter and options
wpx.prototype.getModule =  function (filter, options = { first: true }) {
    // Helper function to create a filter based on properties
    function byProperties(...properties) {
        return m => properties.every(e => m?.[e]);
    }

    // If filter is a string, convert it to a filter function
    if (typeof filter == "string") {
        let filterVal = filter;
        filter = byProperties(filterVal);
    }

    const module = [];

    // Iterate through the cache to find matching modules
    for (const { i, exports } of Object.values(this.require.c)) {
        try {
            // Check the main exports
            if (filter(exports, this.require.c[i], i)) {
                if (options.first) {
                    return exports;
                }
                module.push(exports);
            }

            // Check the properties of the exports
            for (const j of Object.getOwnPropertyNames(exports ?? {})) {
                if (filter(exports?.[j], this.require.c[i], i)) {
                    if (options.first) {
                        return exports?.[j];
                    }
                    module.push(exports?.[j]);
                }
            }
        } catch (e) {}
    }

    return module;
}

// Method to patch a module based on module ID, patch filter, and patch code
wpx.prototype.patchModule = function (moduleID, patchFilter, patch) {  
    let module;

    // allow for patching the module directly
    if (typeof moduleID === "function") {
        module = moduleID;
    } else {
        module = this.require.m[moduleID];
    }

    // edit the code
    let code = module.toString()
    let patchedCode = code.replace(patchFilter, patch)
    
    // patch the code and run it
    module = (0, eval)(`() => ${patchedCode}`)()
    module({},{}, this.require)
}
