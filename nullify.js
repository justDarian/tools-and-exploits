function injectFramework() {
  window.godlike = {}
  class logger {
    /**
     * Parses the type of log.
     * @param {string} type - The type of log.
     * @returns {string} - The parsed type of log.
     */
    static _parseType(type) {
      switch (type) {
        case "info":
        case "warn":
        case "error":
          return type;
        default:
          return "log";
      }
    }

    /**
     * Logs a message with the specified type and module.
     * @param {string} type - The type of log.
     * @param {string} module - The module to log.
     * @param {...any} message - The message to log.
     */
    static _log(type, module, ...message) {
      type = this._parseType(type);
      console[type](`%c[Godlike]%c %c[${module}]%c`, "color: #00FFFF; font-weight: 700;", "", "color: #396CB8", "", ...message);
    }

    /**
     * Logs a message with the specified module using the 'log' type.
     * @param {string} module - The module to log.
     * @param {...any} message - The message to log.
     */
    static log(module, ...message) {
      this._log("log", module, ...message);
    }

    /**
     * Logs a message with the specified module using the 'info' type.
     * @param {string} module - The module to log.
     * @param {...any} message - The message to log.
     */
    static info(module, ...message) {
      this._log("info", module, ...message);
    }

    /**
     * Logs a message with the specified module using the 'warn' type.
     * @param {string} module - The module to log.
     * @param {...any} message - The message to log.
     */
    static warn(module, ...message) {
      this._log("warn", module, ...message);
    }

    /**
     * Logs a message with the specified module using the 'error' type.
     * @param {string} module - The module to log.
     * @param {...any} message - The message to log.
     */
    static error(module, ...message) {
      this._log("error", module, ...message);
    }
  }
  window.godlike.logger = logger // add logger to 'godlike' object
  /**
   * Injects a structured clone of the window object and replaces the eval function with a new one that filters out any arguments containing the string "debug".
   */
  window.godlike.disabler = () => {
    window = structuredClone(window);
    let oldEval = window.eval;
    window.eval = function(args) {
      args = JSON.stringify(args)
      if (args.includes("debug") === true) { } else {
        return oldEval(args)
      }
    };
  }

  /**
   * This object contains hooks for dashboard and lesson.
   * @type {Object}
   * @property {Object} dashboardHook1 - The first hook for dashboard.
   * @property {Object} dashboardHook2 - The second hook for dashboard.
   * @property {Object} lessonHook1 - The first hook for lesson.
   */
  window.godlike.hookHandler = {
    get dashboardHook1() {
      try {
        return Object.values(document.getElementById("StudentDashboard-g38"))[1].children[0]._owner.stateNode
      } catch (error) {
        return logger.error(error)
      }
    },
    get dashboardHook2() {
      try {
        return Object.values(document.getElementsByClassName("css-17awnnt-Box eny8iue0")[0])[1].children._owner.stateNode
      } catch (error) {
        return logger.error(error)
      }
    },
    get lessonHook1() {
      try {
        return Object.values(document.getElementById('lesson'))[0].memoizedProps.children[0]._owner.stateNode._screenContainerRef._screenControllerViewRef
      } catch (error) {
        return logger.error(error)
      }
    }
  }

  /**
   * This function patches an object's function with another function.
   * @param {string} functionName - The name of the function to patch.
   * @param {function} patchFunction - The function that will replace the original function.
   * @return {any} - The return value of the original function or the patched function.
   */
  window.godlike.patcher = (object, functionName, patchFunction) => {
    let temp = object[functionName]
    object[functionName] = function(...args) {
      let ret = temp.apply(this, args)
      if (ret && typeof ret.then === 'function') {
        return ret.then((value) => {
          patchFunction([value, args]);
          return value;
        })
      } else {
        patchFunction([ret, args])
        return ret
      }
    }
  }

  window.godlike.logger.info('Framework initialized')
  window.godlike.logger.info('Loading Modules')
  window.GodlikeAdmintoggle = false;
  window.godlike.modules = {
    /**
     * This object contains hooks for enabling all permissions, enabling admin menu and skipping questions.
     * @type {Object}
     * @property {Object} enableAllPerms - The hook for enabling all permissions.
     * @property {Object} enableAdminMenu - The hook for enabling admin menu.
     * @property {Object} skipQuestion - The hook for skipping questions.
     */
    get enableAllPerms() {
      try {
        if (window.GodlikeAdmintoggle === false) {
          for (var key in Object.values(document.getElementById("navi"))[1].children.props.studentPrivileges) {
            Object.values(document.getElementById("navi"))[1].children.props.studentPrivileges[key] = true;
          }
          window.GodlikeAdmintoggle = true;
        } else {
          for (var key in Object.values(document.getElementById("navi"))[1].children.props.studentPrivileges) {
            Object.values(document.getElementById("navi"))[1].children.props.studentPrivileges[key] = false;
          }
          window.GodlikeAdmintoggle = false;
        }
      } catch (error) {
        return logger.error(error)
      }
    },
    get enableAdminMenu() {
      try {
        Object.values(document.getElementById("StudentDashboard-g38"))[1].children[0]._owner.stateNode.props.dispatchToggleCheatButtonsAction()
      } catch (error) {
        return logger.error(error)
      }
    },
    get skipQuestion() {
      try {
        Object.values(document.getElementById('nav-forward'))[1].onClick()
      } catch (error) {
        return logger.error(error)
      }
    }
  }
  window.godlike.utils = {}
  window.godlike.utils.dragElement = (elmnt) => {
    var pos1 = 0,
      pos2 = 0,
      pos3 = 0,
      pos4 = 0;
    if (document.getElementById(elmnt.id + "header")) {
      /* if present, the header is where you move the DIV from:*/
      document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
    } else {
      /* otherwise, move the DIV from anywhere inside the DIV:*/
      elmnt.onmousedown = dragMouseDown;
    }

    function dragMouseDown(e) {
      e = e || window.event;
      e.preventDefault();
      // get the mouse cursor position at startup:
      pos3 = e.clientX;
      pos4 = e.clientY;
      document.onmouseup = closeDragElement;
      // call a function whenever the cursor moves:
      document.onmousemove = elementDrag;
    }

    function elementDrag(e) {
      e = e || window.event;
      e.preventDefault();
      // calculate the new cursor position:
      pos1 = pos3 - e.clientX;
      pos2 = pos4 - e.clientY;
      pos3 = e.clientX;
      pos4 = e.clientY;
      // set the element's new position:
      elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
      elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
    }

    function closeDragElement() {
      /* stop moving when mouse button is released:*/
      document.onmouseup = null;
      document.onmousemove = null;
    }
  }

  window.godlike.logger.info('Modules initialized')
  window.godlike.logger.info('Godlike initialized')
  window.godlike.logger.info('Made with ❤️ by darian, wang & plu')
}
function controlPanel() {
  // Create a new div element
  const newDiv = document.createElement("div");

  // Add content to the div element
  newDiv.innerHTML = `
<br>

<h1 class="header" style=" font-size: 20px;"><center>Godlike</center></h1>
<style>
.panelButton {
    border: none;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
    -webkit-transition-duration: 0.4s;
    transition-duration: 0.4s;
    width: 100%;
    text-align: center;
    color: black;
    background-color: rgb(255 255 255);
    opacity: 0.90;
    border: 1px solid rgb(238, 238, 238);
}
.panelButton:hover {
  color: black;
  background-color: rgb(238, 238, 238);
}
.panelButton:active {
  color: white;
  background-color: rgb(80 80 80);
}
.header{
  color: black;
}
</style>
<button id="exploit" class="panelButton">Open Dashboard Hacks</button>
<button id="exploit" class="panelButton">Open Lesson Hacks</button>
<button id="exploit" class="panelButton">Open Visual Hacks</button>
<button id="exploit" class="panelButton">Open Misc Hacks</button>
<button id="exploit" class="panelButton">Customization</button>
<button id="exploit" class="panelButton">Discord</button>
<br>
    <br>`

  // Set the style of the div element
  newDiv.style.width = "200px";
  newDiv.style.height = "200px";
  newDiv.style.backgroundColor = "white";
  newDiv.style.position = "fixed";
  newDiv.style.top = "50px";
  newDiv.style.right = "-200px";
  newDiv.style.transition = "right 0.5s ease-in-out";
  newDiv.style.borderRadius = "0px 0px 0px 10px";
  newDiv.style.opacity = "0.95";
  newDiv.style.border = "3px solid rgb(238, 238, 238)";

  // Add the div element to the body of the page
  document.body.appendChild(newDiv);

  // Create a button element
  const newButton = document.createElement("button");
  newButton.id = 'button'
  newButton.className = 'button'

  // Add content to the button element
  newButton.innerHTML = "&#9776; <style> button:focus { outline: none; } </style>";

  // Set the style of the button element
  newButton.style.position = "fixed";
  newButton.style.top = "50px";
  newButton.style.right = "0";
  newButton.style.fontSize = "20px";
  newButton.style.borderRadius = "0px 0px 0px 10px";
  newButton.style.backgroundColor = "white";
  newButton.style.padding = "0";
  newButton.style.border = "none";
  newButton.style.background = "white";
  newButton.style.opacity = '0.95'
  newButton.style.border = '3px solid rgb(238, 238, 238)'

  // Create a variable to keep track of whether the buttons have been created
  let buttonsCreated = false;

  // Add an event listener to the button element
  newButton.addEventListener("click", () => {
    if (newDiv.style.right === "-200px") {
      newDiv.style.right = "0";
      newButton.innerHTML = "&#10006; <style> button:focus { outline: none; } </style>";
    } else {
      newDiv.style.right = "-200px";
      newButton.innerHTML = "&#9776; <style> button:focus { outline: none; } </style>";
    }
  });

  // Add the button element to the body of the page
  document.body.appendChild(newButton);
}

injectFramework()
controlPanel()
function testGUI() {
  var UI = document.createElement("div");
  UI.id = 'dashboardPanel'
  UI.innerHTML = `<div>
<h1 style=" font-size: 20px;"><center>Dashboard</center>
    <div class="line"></div>
    </h1>
    <button id="exploit" class="panelButton">All Permissions</button>
    <button id="exploit" class="panelButton">Admin Menu</button>
    <br>
    </div>`

  UI.style.width = "200px";
  UI.style.height = "200px";
  UI.style.backgroundColor = "white";
  UI.style.position = "fixed";
  UI.style.top = "50px";
  UI.style.right = "200px";
  UI.style.borderRadius = "10px";
  UI.style.opacity = "0.95";
  UI.style.border = "3px solid rgb(238, 238, 238)";

  godlike.utils.dragElement(UI);
  document.body.appendChild(UI);

  var UI = document.createElement("div");
  UI.id = 'dashboardPanel'
  UI.innerHTML = `<div>
<h1 style=" font-size: 20px;"><center>Dashboard</center>
    <div class="line"></div>
    </h1>
    <canvas id="colorCanvas" class="color-canvas" width="100%" height="100%"></canvas>
    <br>
    </div>`

  UI.style.width = "200px";
  UI.style.height = "200px";
  UI.style.backgroundColor = "white";
  UI.style.position = "fixed";
  UI.style.top = "50px";
  UI.style.right = "200px";
  UI.style.borderRadius = "10px";
  UI.style.opacity = "0.95";
  UI.style.border = "3px solid rgb(238, 238, 238)";

  godlike.utils.dragElement(UI);
  document.body.appendChild(UI);
}
function initColorPicker() {
  var canvas = document.getElementById('colorCanvas');
  var canvasContext = canvas.getContext('2d');

  let gradient = canvas.getContext('2d').createLinearGradient(0, 0, canvas.width, 0)
  gradient.addColorStop(0, '#ff0000')
  gradient.addColorStop(1 / 6, '#ffff00')
  gradient.addColorStop((1 / 6) * 2, '#00ff00')
  gradient.addColorStop((1 / 6) * 3, '#00ffff')
  gradient.addColorStop((1 / 6) * 4, '#0000ff')
  gradient.addColorStop((1 / 6) * 5, '#ff00ff')
  gradient.addColorStop(1, '#ff0000')
  canvas.getContext('2d').fillStyle = gradient
  canvas.getContext('2d').fillRect(0, 0, canvas.width, canvas.height)

  gradient = canvas.getContext('2d').createLinearGradient(0, 0, 0, canvas.height)
  gradient.addColorStop(0, 'rgba(255, 255, 255, 1)')
  gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0)')
  gradient.addColorStop(1, 'rgba(255, 255, 255, 0)')
  canvas.getContext('2d').fillStyle = gradient
  canvas.getContext('2d').fillRect(0, 0, canvas.width, canvas.height)

  gradient = canvas.getContext('2d').createLinearGradient(0, 0, 0, canvas.height)
  gradient.addColorStop(0, 'rgba(0, 0, 0, 0)')
  gradient.addColorStop(0.5, 'rgba(0, 0, 0, 0)')
  gradient.addColorStop(1, 'rgba(0, 0, 0, 1)')
  canvas.getContext('2d').fillStyle = gradient
  canvas.getContext('2d').fillRect(0, 0, canvas.width, canvas.height)


  canvas.onclick = function(e) {
    console.log()
    var imgData = canvasContext.getImageData((e.offsetX / canvas.clientWidth) * canvas.width, (e.offsetY / canvas.clientHeight) * canvas.height, 1, 1)
    var rgba = imgData.data;
    var color = "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + rgba[3] + ")";
    console.log("%c" + color, "color:" + color)
  }
}

function gup(name) {
  name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
  var regexS = "[\\?&]" + name + "=([^&#]*)";
  var regex = new RegExp(regexS);
  var results = regex.exec(window.location.href);
  if (results == null)
    return "";
  else
    return results[1];
}
if (gup('user') && gup('pass') && gup('state')) {

  const username = decodeURI(gup('user'));
  const password = decodeURI(gup('pass'));
  const stateId = decodeURI(gup('state'));

  const params = {
    username: username,
    password: password,
    stateId: stateId,
  };

  fetch('/login/login/v2', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(params)
  })
    .then(response => response.json())
    .then(data => {
      if (data.redirect) {
        window.location.href = data.redirect;
      } else {
        console.log('no redirect. error in response');
      }
    })
    .catch(error => {
      console.error('error:', error);
    });
}