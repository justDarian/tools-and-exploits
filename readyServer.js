const cookieParser = require('cookie-parser');
const express = require('express')
const path = require("path")
const app = express()
app.use(cookieParser());
let cookie = ""


app.use(express.urlencoded());
app.use(express.json());

const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

app.get('*', (req, res) => {
  console.log(req.url + " GET")
  if (req.url == "/favicon.ico") {
    //res.redirect("https://login.i-ready.com/favicon.ico")
    res.sendFile(path.join(__dirname, '..' + "/favicon.ico"))
    return
  }
  if (req.url == "/logout" || req.url == "/login") {
    let cookies = req.cookies
    for (let cookie in cookies) {
      res.clearCookie(cookie)
    }
    res.redirect("/")
    return
  }
  // if (req.url == "/i-ready.js" || req.url == "/app.js" || req.url == "/app-main.chunk.js" || req.url == "/static/js/app-20.chunk.js" || req.url == "/static/js/app-19.chunk.js" || req.url == "/static/js/app-12.chunk.js"|| req.url == "/static/js/app-18.chunk.js" || req.url == "/cdn/instruction/reading-cjomp/release-13.4/14/main.js" || req.url == "/app-vendor.chunk.js" || req.url == "/static/js/app-31.chunk.js" || req.url == "/app-31.chunk.js" || req.url.includes("app-35.chunk.js")) {
  //   if (req.url == "/static/js/app-20.chunk.js") {
  //     res.sendFile(path.join(__dirname+"/app-20.chunk.js"))
  //     return
  //   }
  //   if (req.url == "/static/js/app-19.chunk.js") {
  //     res.sendFile(path.join(__dirname+"/app-19.chunk.js"))
  //     return
  //   }
  //   if (req.url == "/static/js/app-12.chunk.js") {
  //     res.sendFile(path.join(__dirname+"/app-12.chunk.js"))
  //     return
  //   }
  //   if (req.url == "/cdn/instruction/reading-comp/release-13.4/14/main.js") {
  //     res.sendFile(path.join(__dirname+"/main.js"))
  //     return
  //   }
  //   if (req.url == "/static/js/app-18.chunk.js") {
  //     res.sendFile(path.join(__dirname+"/app-18.chunk.js"))
  //     return
  //   }
  //   if (req.url == "/static/js/app-31.chunk.js") {
  //     res.sendFile(path.join(__dirname+"/app-31.chunk.js"))
  //     return
  //   }
  //   if (req.url == "/static/js/app-35.chunk.js") {
  //     res.sendFile(path.join(__dirname+"/app-35.chunk.js"))
  //     return
  //   }
  //   res.sendFile(path.join(__dirname+req.url))
  //   return
  // }
  if (req.url.indexOf("/cdn/") != -1 || req.url.indexOf("/static/") != -1 || req.url.indexOf("/instruction/") != -1 || req.url.indexOf("/libs/") != -1) {
    if (req.url.indexOf("/static/") != -1) {
      console.log("Found in url")
      res.redirect(`https://cdn.i-ready.com/instruction/student-dashboard/release-13.6.x/2${req.url}`)
      return
    }
    if (req.path.indexOf("woff2") == -1 && req.path.indexOf(".mp") == -1 && req.path.indexOf(".jpg") == -1 && !req.path.includes(".png") && !req.path.includes(".m4a") && req.path.indexOf("trackjs") == -1 && !req.path.includes(".vtt") && !req.path.includes(".ico") && !req.url.includes(".css") || req.url.indexOf("?csid") != -1) {
      console.log("YO")
      req.headers["host"] = "cdn.i-ready.com"
      console.log(req.url.indexOf("/cdn/") != -1 ? req.url.split("/cdn/")[1] : req.url)
      fetch(`https://cdn.i-ready.com/${req.url.indexOf("/cdn/") != -1 ? req.url.split("/cdn/")[1] : req.url.slice(1)}`, { method: "GET", headers: req.headers })
        .then(response => response.text())
        .then(data => {
          if (req.path.indexOf(".json") != -1) {
            res.setHeader('Content-Type', 'application/json');
            res.send(data)
            return
          }
          res.send(data.replaceAll("default: env = 'test';", "default: env = 'dev';"))
        })
      return
    }
    if (req.url.indexOf("/cdn/") != -1) {
      res.redirect(`https://cdn.i-ready.com/${req.url.split("/cdn/")[1]}`)
      return
    }
    console.log("Normal redirect!")
    res.redirect(`https://cdn.i-ready.com${req.url}`)
    return
  }
  req.headers["host"] = "login.i-ready.com"
  req.headers["referer"] = "https://login.i-ready.com"
  //console.log(req.headers)
  let toSendHeaders;
  fetch(`https://login.i-ready.com${req.url}`, { method: "GET", headers: req.headers })
    .then((response) => {
      toSendHeaders = response.headers
      return response.text()
    })
    .then((data) => {
      // console.log(toSendHeaders)
      //res.set(toSendHeaders)
      res.send(data.toString())
      //console.log(data)
    })
})

app.post('*', (req, res) => {
  console.log(req.url + " POST")
  //console.log(req.headers)
  if (req.url == "/student/lesson/componentStarted") {
    res.status(200).send("")
    return
  }
  if (req.url == "/login/browsercheck") {
    res.status(200).send({ "loginAllowed": true, "browserNotSupported": false, "browserAllowedNotFullySupported": false, "isDesktopSafari": false, "isMobileSafariOnIPadOS": false })
    return
  }
  req.headers["host"] = "login.i-ready.com"
  req.headers["origin"] = "https://login.i-ready.com"
  req.headers["referer"] = "https://login.i-ready.com/student/dashboard/home"
  req.headers["dashboard-version"] = "release-13.6.x/2"
  req.headers["cookie"] = req.headers["cookie"]?.replaceAll("%3D", "")
  for (let header in req.headers) {
    ///console.log(header)
    if (header.includes("x-forwarded") || header.includes("replit")) {
      delete req.headers[header]
    }
 }
  console.log(req)
  req.headers["authorization"] = null
   if (req.url == "/login/browsercheck") {
     res.sendFile(path.join(__dirname+"/login/browsercheck"))
     return
   }
  if (req.url == "/student/v1/web/logger") {
    res.sendStatus(200)
    return
  }
  if (req.url == "/login/login/v2") {
    fetch(`https://login.i-ready.com${req.url}`, { method: "POST", headers: req.headers, body: JSON.stringify(req.body) })
      .then(response => {
        response.text()
        if (response.status == 200) {
          let bruh = response.headers.get('set-cookie')
          let SecureToken = bruh.split("CA.IREADY.SECURE_TOKEN=")[1].split(";")[0]
          let JSESSIONID = bruh.split("JSESSIONID=")[1].split(";")[0]
          let CASESSIONNAME = bruh.split("CA.SESSION.NAME=")[1].split(";")[0]
          let iready_login_id = bruh.split("iready_login_id")[1].split(";")[0]
          let iready_last_user_type = bruh.split("iready_last_user_type")[1].split(";")[0]
          //let iready_landing_page_id = bruh.split('iready_landing_page_id')[1].split(";")[0]
          let AWSALB = bruh.split('AWSALB')[1].split(";")[0]
          let AWSALBCORS = bruh.split('AWSALBCORS')[1].split(";")[0]
          res.cookie('JSESSIONID', JSESSIONID)
          res.cookie('CA.SESSION.NAME', CASESSIONNAME)
          res.cookie('iready_last_user_type', iready_last_user_type)
          res.cookie("iready_login_id", iready_login_id)
          res.cookie('CA.IREADY.SECURE_TOKEN', SecureToken)
          //res.cookie('iready_landing_page_id', iready_landing_page_id)
          res.cookie('AWSALB', AWSALB)
          res.cookie('AWSALBCORS', AWSALBCORS)
          res.send(`{"redirect":"/student/dashboard/home","tryIt":false,"tryItDaysRemaining":null,"roleType":"STUDENT","hardSSO":false}`)
          SecureToken = "CA.IREADY.SECURE_TOKEN=" + bruh.split("CA.IREADY.SECURE_TOKEN=")[1].split(";")[0] + ";"
          JSESSIONID = "JSESSIONID=" + bruh.split("JSESSIONID=")[1].split(";")[0] + ";"
          cookie = SecureToken + JSESSIONID
        } else {
          res.setHeader('Content-Type', 'application/json');
          res.status(400).end(JSON.stringify({ "error": { "code": -35000, "message": "Invalid Credentials", "data": { "message": "Sex" } } }));
        }
      })
    //.then(data=>console.log(data))
    return
  }
  //console.log("Fetchign with cookie: "+ cookie)
  fetch(`https://login.i-ready.com${req.url}`, { method: "POST", headers: req.headers, body: JSON.stringify(req.body) })
    .then(response => {
      ///console.log(response)
      return response.text()
    })
    .then(data => {
      ///console.log(data)
      res.send(data)
    })
})

app.listen(3000, () => {
  console.log('Server listening on port 3000')
})
