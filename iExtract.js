let iExtract = {
    require(webpack) {
        return webpack.push([
            [Symbol()], {},
            r => r
        ]);
    },
    getModules(webpack) {
        return this.require(webpack).m;
    },
    getExports(webpack, id) {
        let returnObj = {}
        let requiredModule = this.require(webpack);
        let modules = this.getModules(webpack);
        try {
            requiredModule(modules[id](returnObj, returnObj, requiredModule)); // Error usually happens on first try
        } catch (error) {
            requiredModule(modules[id](returnObj, returnObj, requiredModule));
        }
        return returnObj
    },
    returnAllExports(webpack) {
        let returnObj = [];
        let modules = this.getModules(webpack);
    
        for (const moduleId in modules) {
            if (modules.hasOwnProperty(moduleId)) {
                try {
                    let exports = this.getExports(webpack, moduleId);
                    returnObj.push(exports);
                } catch (e) {
                    // Skip over modules that encountered errors
                    console.error(`Error while getting exports for module with ID ${moduleId}:`, e);
                }
            }
        }
    
        return returnObj; // Moved outside of the loop
    },
    returnAllExportsES(webpack) {
        let returnObj = [];
        let modules = this.getModules(webpack);
    
        for (const moduleId in modules) {
            if (modules.hasOwnProperty(moduleId)) {
                try {
                    let exports = this.getExports(webpack, moduleId);
                    if (exports['__esModule'] !== undefined) {
                        returnObj.push(exports);
                    }
                } catch (e) {
                    // Skip over modules that encountered errors
                    console.error(`Error while getting exports for module with ID ${moduleId}:`, e);
                }
            }
        }
    
        return returnObj; // Moved outside of the loop
    },
    returnAllExportsWith(filter, webpack) {
        try {
            let returnObj = [];
            let modules = this.getModules(webpack);
            
            for (const moduleId in modules) {
                if (modules.hasOwnProperty(moduleId)) {
                    try {
                        let exports = this.getExports(webpack, moduleId);
                        if (exports[filter] !== undefined) {
                            returnObj.push(exports);
                        }
                    } catch (e) {
                        // Skip over modules that encountered errors
                        console.error(`Error while getting exports for module with ID ${moduleId}:`, e);
                    }
                }
            }
        
            return returnObj; // Moved outside of the loop
        } catch (e) { //there is so many errors its crazy 
        }
    }
};

export default iExtract